AWSTemplateFormatVersion: 2010-09-09
Description: A CloudFormation template for Airflow AWS ECS cluster.

Parameters:
  VPC:
    Type: AWS::EC2::VPC::Id
  SubnetA:
    Type: AWS::EC2::Subnet::Id
  SubnetB:
    Type: AWS::EC2::Subnet::Id
  ALBSubnets:
    Description: The subnets to place AWS load balancer.
    Type: List<AWS::EC2::Subnet::Id>
  AirflowImage:
    Type: String
    # Update with the Docker image. "You can use images in the Docker Hub registry or specify other repositories (repository-url/image:tag)."
    Default: 594602835978.dkr.ecr.us-west-1.amazonaws.com/apache/airflow:latest
  HealthCheckPath:
    Type: String
    Default: /
  # for autoscaling
  WorkerMinContainers:
    Type: Number
    Default: 2
  # for autoscaling
  WorkerMaxContainers:
    Type: Number
    Default: 10
  # target CPU utilization (%)
  WorkerAutoScalingTargetValue:
    Type: Number
    Default: 50
  # CloudFormation stack name of RDS resource
  ResourcesStack:
    Type: String
    Default: airflow-resources
  # Parameter store ARN for DB password
  DBPasswordStore:
    Type: String
    Default: airflow-db-password

Resources:

  Airflow:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterSettings:
        - Name: containerInsights
          Value: enabled

  WebServerLG:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 30

  SchedulerLG:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 30

  WorkerLG:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 30

  FlowerLG:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 30

  RedisLG:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 30
  # A role needed by ECS
  ExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy'
      Policies:
        - PolicyName: !Sub "${AWS::StackName}-ParameterStoreAccess"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "ssm:GetParameters"
                  - "kms:Decrypt"
                Resource:
                  - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${DBPasswordStore}"
                  - !Sub "arn:aws:kms:${AWS::Region}:${AWS::AccountId}:alias/aws/ssm"
  # A role for the containers
  TaskRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy'
      Policies:
        - PolicyName: !Sub "${AWS::StackName}-ParameterStoreAccess"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "ssm:GetParameters"
                  - "kms:Decrypt"
                Resource:
                  - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${DBPasswordStore}"
                  - !Sub "arn:aws:kms:${AWS::Region}:${AWS::AccountId}:alias/aws/ssm"

  WebServerTD:
    Type: AWS::ECS::TaskDefinition
    # Makes sure the log group is created before it is used.
    DependsOn: WebServerLG
    Properties:
      # awsvpc is required for Fargate
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      # 256 (.25 vCPU) - Available memory values: 0.5GB, 1GB, 2GB
      # 512 (.5 vCPU) - Available memory values: 1GB, 2GB, 3GB, 4GB
      # 1024 (1 vCPU) - Available memory values: 2GB, 3GB, 4GB, 5GB, 6GB, 7GB, 8GB
      # 2048 (2 vCPU) - Available memory values: Between 4GB and 16GB in 1GB increments
      # 4096 (4 vCPU) - Available memory values: Between 8GB and 30GB in 1GB increments
      Cpu: 512
      # 0.5GB, 1GB, 2GB - Available cpu values: 256 (.25 vCPU)
      # 1GB, 2GB, 3GB, 4GB - Available cpu values: 512 (.5 vCPU)
      # 2GB, 3GB, 4GB, 5GB, 6GB, 7GB, 8GB - Available cpu values: 1024 (1 vCPU)
      # Between 4GB and 16GB in 1GB increments - Available cpu values: 2048 (2 vCPU)
      # Between 8GB and 30GB in 1GB increments - Available cpu values: 4096 (4 vCPU)
      Memory: 1GB
      # A role needed by ECS.
      # "The ARN of the task execution role that containers in this task can assume. All containers in this task are granted the permissions that are specified in this role."
      # "There is an optional task execution IAM role that you can specify with Fargate to allow your Fargate tasks to make API calls to Amazon ECR."
      ExecutionRoleArn: !Ref ExecutionRole
      # "The Amazon Resource Name (ARN) of an AWS Identity and Access Management (IAM) role that grants containers in the task permission to call AWS APIs on your behalf."
      TaskRoleArn: !Ref TaskRole
      ContainerDefinitions:
        - Name: !Sub "${AWS::StackName}-WebServer"
          Image: !Ref AirflowImage
          EntryPoint:
            - /entrypoint.sh
            - webserver
          PortMappings:
            - ContainerPort: 8080
          # Send logs to CloudWatch Logs
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-region: !Ref AWS::Region
              awslogs-group: !Ref WebServerLG
              awslogs-stream-prefix: ecs
          Secrets:
            - Name: POSTGRES_PASSWORD
              ValueFrom: !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${DBPasswordStore}"
          Environment:
            - Name: AIRFLOW__CORE__LOAD_EXAMPLES
              Value: True
            - Name: POSTGRES_HOST
              Value:
                Fn::ImportValue: !Sub "${ResourcesStack}-ServerName"
            - Name: POSTGRES_PORT
              Value: 5432
            - Name: POSTGRES_DB
              Value: postgres
            - Name: POSTGRES_USER
              Value:
                Fn::ImportValue: !Sub "${ResourcesStack}-UserName"

  SchedulerTD:
    Type: AWS::ECS::TaskDefinition
    # Makes sure the log group is created before it is used.
    DependsOn: SchedulerLG
    Properties:
      # awsvpc is required for Fargate
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      # 256 (.25 vCPU) - Available memory values: 0.5GB, 1GB, 2GB
      # 512 (.5 vCPU) - Available memory values: 1GB, 2GB, 3GB, 4GB
      # 1024 (1 vCPU) - Available memory values: 2GB, 3GB, 4GB, 5GB, 6GB, 7GB, 8GB
      # 2048 (2 vCPU) - Available memory values: Between 4GB and 16GB in 1GB increments
      # 4096 (4 vCPU) - Available memory values: Between 8GB and 30GB in 1GB increments
      Cpu: 512
      # 0.5GB, 1GB, 2GB - Available cpu values: 256 (.25 vCPU)
      # 1GB, 2GB, 3GB, 4GB - Available cpu values: 512 (.5 vCPU)
      # 2GB, 3GB, 4GB, 5GB, 6GB, 7GB, 8GB - Available cpu values: 1024 (1 vCPU)
      # Between 4GB and 16GB in 1GB increments - Available cpu values: 2048 (2 vCPU)
      # Between 8GB and 30GB in 1GB increments - Available cpu values: 4096 (4 vCPU)
      Memory: 2GB
      # A role needed by ECS.
      # "The ARN of the task execution role that containers in this task can assume. All containers in this task are granted the permissions that are specified in this role."
      # "There is an optional task execution IAM role that you can specify with Fargate to allow your Fargate tasks to make API calls to Amazon ECR."
      ExecutionRoleArn: !Ref ExecutionRole
      # "The Amazon Resource Name (ARN) of an AWS Identity and Access Management (IAM) role that grants containers in the task permission to call AWS APIs on your behalf."
      TaskRoleArn: !Ref TaskRole
      ContainerDefinitions:
        - Name: !Sub "${AWS::StackName}-Scheduler"
          Image: !Ref AirflowImage
          EntryPoint:
            - /entrypoint.sh
            - scheduler
          # Send logs to CloudWatch Logs
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-region: !Ref AWS::Region
              awslogs-group: !Ref SchedulerLG
              awslogs-stream-prefix: ecs
          Secrets:
            - Name: POSTGRES_PASSWORD
              ValueFrom: !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${DBPasswordStore}"
          Environment:
            - Name: AIRFLOW__CORE__LOAD_EXAMPLES
              Value: True
            - Name: REDIS_HOST
              Value: !GetAtt Redis.RedisEndpoint.Address
            - Name: POSTGRES_HOST
              Value:
                Fn::ImportValue: !Sub "${ResourcesStack}-ServerName"
            - Name: POSTGRES_PORT
              Value: 5432
            - Name: POSTGRES_DB
              Value: postgres
            - Name: POSTGRES_USER
              Value:
                Fn::ImportValue: !Sub "${ResourcesStack}-UserName"

  WorkerTD:
    Type: AWS::ECS::TaskDefinition
    # Makes sure the log group is created before it is used.
    DependsOn: WorkerLG
    Properties:
      # awsvpc is required for Fargate
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      # 256 (.25 vCPU) - Available memory values: 0.5GB, 1GB, 2GB
      # 512 (.5 vCPU) - Available memory values: 1GB, 2GB, 3GB, 4GB
      # 1024 (1 vCPU) - Available memory values: 2GB, 3GB, 4GB, 5GB, 6GB, 7GB, 8GB
      # 2048 (2 vCPU) - Available memory values: Between 4GB and 16GB in 1GB increments
      # 4096 (4 vCPU) - Available memory values: Between 8GB and 30GB in 1GB increments
      Cpu: 1024
      # 0.5GB, 1GB, 2GB - Available cpu values: 256 (.25 vCPU)
      # 1GB, 2GB, 3GB, 4GB - Available cpu values: 512 (.5 vCPU)
      # 2GB, 3GB, 4GB, 5GB, 6GB, 7GB, 8GB - Available cpu values: 1024 (1 vCPU)
      # Between 4GB and 16GB in 1GB increments - Available cpu values: 2048 (2 vCPU)
      # Between 8GB and 30GB in 1GB increments - Available cpu values: 4096 (4 vCPU)
      Memory: 3GB
      # A role needed by ECS.
      # "The ARN of the task execution role that containers in this task can assume. All containers in this task are granted the permissions that are specified in this role."
      # "There is an optional task execution IAM role that you can specify with Fargate to allow your Fargate tasks to make API calls to Amazon ECR."
      ExecutionRoleArn: !Ref ExecutionRole
      # "The Amazon Resource Name (ARN) of an AWS Identity and Access Management (IAM) role that grants containers in the task permission to call AWS APIs on your behalf."
      TaskRoleArn: !Ref TaskRole
      ContainerDefinitions:
        - Name: !Sub "${AWS::StackName}-Worker"
          Image: !Ref AirflowImage
          EntryPoint:
            - /entrypoint.sh
            - worker
          PortMappings:
            - ContainerPort: 8793
          # Send logs to CloudWatch Logs
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-region: !Ref AWS::Region
              awslogs-group: !Ref WorkerLG
              awslogs-stream-prefix: ecs
          Secrets:
            - Name: POSTGRES_PASSWORD
              ValueFrom: !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${DBPasswordStore}"
          Environment:
            - Name: AIRFLOW__CORE__LOAD_EXAMPLES
              Value: True
            - Name: REDIS_HOST
              Value: !GetAtt Redis.RedisEndpoint.Address
            - Name: POSTGRES_HOST
              Value:
                Fn::ImportValue: !Sub "${ResourcesStack}-ServerName"
            - Name: POSTGRES_PORT
              Value: 5432
            - Name: POSTGRES_DB
              Value: postgres
            - Name: POSTGRES_USER
              Value:
                Fn::ImportValue: !Sub "${ResourcesStack}-UserName"

  FlowerTD:
    Type: AWS::ECS::TaskDefinition
    # Makes sure the log group is created before it is used.
    DependsOn: FlowerLG
    Properties:
      # awsvpc is required for Fargate
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      # 256 (.25 vCPU) - Available memory values: 0.5GB, 1GB, 2GB
      # 512 (.5 vCPU) - Available memory values: 1GB, 2GB, 3GB, 4GB
      # 1024 (1 vCPU) - Available memory values: 2GB, 3GB, 4GB, 5GB, 6GB, 7GB, 8GB
      # 2048 (2 vCPU) - Available memory values: Between 4GB and 16GB in 1GB increments
      # 4096 (4 vCPU) - Available memory values: Between 8GB and 30GB in 1GB increments
      Cpu: 256
      # 0.5GB, 1GB, 2GB - Available cpu values: 256 (.25 vCPU)
      # 1GB, 2GB, 3GB, 4GB - Available cpu values: 512 (.5 vCPU)
      # 2GB, 3GB, 4GB, 5GB, 6GB, 7GB, 8GB - Available cpu values: 1024 (1 vCPU)
      # Between 4GB and 16GB in 1GB increments - Available cpu values: 2048 (2 vCPU)
      # Between 8GB and 30GB in 1GB increments - Available cpu values: 4096 (4 vCPU)
      Memory: 0.5GB
      # A role needed by ECS.
      # "The ARN of the task execution role that containers in this task can assume. All containers in this task are granted the permissions that are specified in this role."
      # "There is an optional task execution IAM role that you can specify with Fargate to allow your Fargate tasks to make API calls to Amazon ECR."
      ExecutionRoleArn: !Ref ExecutionRole
      # "The Amazon Resource Name (ARN) of an AWS Identity and Access Management (IAM) role that grants containers in the task permission to call AWS APIs on your behalf."
      TaskRoleArn: !Ref TaskRole
      ContainerDefinitions:
        - Name: !Sub "${AWS::StackName}-Flower"
          Image: !Ref AirflowImage
          EntryPoint:
            - /entrypoint.sh
            - flower
          PortMappings:
            - ContainerPort: 5555
          # Send logs to CloudWatch Logs
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-region: !Ref AWS::Region
              awslogs-group: !Ref FlowerLG
              awslogs-stream-prefix: ecs
          Secrets:
            - Name: POSTGRES_PASSWORD
              ValueFrom: !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${DBPasswordStore}"
          Environment:
            - Name: REDIS_HOST
              Value: !GetAtt Redis.RedisEndpoint.Address
            - Name: POSTGRES_HOST
              Value:
                Fn::ImportValue: !Sub "${ResourcesStack}-ServerName"
            - Name: POSTGRES_PORT
              Value: 5432
            - Name: POSTGRES_DB
              Value: postgres
            - Name: POSTGRES_USER
              Value:
                Fn::ImportValue: !Sub "${ResourcesStack}-UserName"

  # A role needed for auto scaling
  WorkerAutoScaleRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceAutoscaleRole'

  WebServerSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Airflow WebServer Security Group
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          SourceSecurityGroupId: !Ref LoadBalancerSecurityGroup

  WorkerSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Airflow Worker Security Group
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 8793
          ToPort: 8793
          SourceSecurityGroupId: !Ref WebServerSG

  FlowerSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Airflow Flower Security Group
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 5555
          ToPort: 5555
          SourceSecurityGroupId: !Ref LoadBalancerSecurityGroup

  SchedulerSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Airflow Scheduler Security Group
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: -1
          SourceSecurityGroupId: !Ref WebServerSG

  RedisSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Airflow Redis Security Group
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 6379
          ToPort: 6379
          SourceSecurityGroupId: !Ref FlowerSG
        - IpProtocol: tcp
          FromPort: 6379
          ToPort: 6379
          SourceSecurityGroupId: !Ref WorkerSG
        - IpProtocol: tcp
          FromPort: 6379
          ToPort: 6379
          SourceSecurityGroupId: !Ref SchedulerSG

  RedisSubnetGroup:
    Type: AWS::ElastiCache::SubnetGroup
    Properties:
      Description: Redis Subnet Group for Apache Airflow
      SubnetIds:
        - !Ref SubnetA
        - !Ref SubnetB

  Redis:
    Type: 'AWS::ElastiCache::CacheCluster'
    Properties:
      AutoMinorVersionUpgrade: 'true'
      AZMode: single-az
      Engine: redis
      # Set the size of cache based on load
      CacheNodeType: cache.t3.small
      CacheSubnetGroupName: !Ref RedisSubnetGroup
      NumCacheNodes: '1'
      NotificationTopicArn:
        Fn::ImportValue: !Sub "${ResourcesStack}-TopicArn"
      VpcSecurityGroupIds:
        - !GetAtt
          - RedisSG
          - GroupId

  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Apache Airflow and Flower UI
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 5555
          ToPort: 5555
          CidrIp: 0.0.0.0/0

  WebServer:
    Type: AWS::ECS::Service
    # This dependency is needed so that the load balancer is setup correctly in time
    DependsOn:
      - WebServerListener
    Properties:
      Cluster: !Ref Airflow
      TaskDefinition: !Ref WebServerTD
      DeploymentConfiguration:
        MinimumHealthyPercent: 100
        MaximumPercent: 200
      DesiredCount: 1
      # This may need to be adjusted if the container takes a while to start up
      HealthCheckGracePeriodSeconds: 30
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          # change to DISABLED if you're using private subnets that have access to a NAT gateway
          AssignPublicIp: DISABLED
          Subnets:
            - !Ref SubnetA
            - !Ref SubnetB
          SecurityGroups:
            - !Ref WebServerSG
      LoadBalancers:
        - ContainerName: !Sub "${AWS::StackName}-WebServer"
          ContainerPort: 8080
          TargetGroupArn: !Ref WebServerTG

  Flower:
    Type: AWS::ECS::Service
    # This dependency is needed so that the load balancer is setup correctly in time
    DependsOn:
      - FlowerListener
    Properties:
      Cluster: !Ref Airflow
      TaskDefinition: !Ref FlowerTD
      DeploymentConfiguration:
        MinimumHealthyPercent: 100
        MaximumPercent: 200
      DesiredCount: 1
      # This may need to be adjusted if the container takes a while to start up
      HealthCheckGracePeriodSeconds: 30
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          # change to DISABLED if you're using private subnets that have access to a NAT gateway
          AssignPublicIp: DISABLED
          Subnets:
            - !Ref SubnetA
            - !Ref SubnetB
          SecurityGroups:
            - !Ref FlowerSG
      LoadBalancers:
        - ContainerName: !Sub "${AWS::StackName}-Flower"
          ContainerPort: 5555
          TargetGroupArn: !Ref FlowerTG

  Scheduler:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref Airflow
      TaskDefinition: !Ref SchedulerTD
      DeploymentConfiguration:
        MinimumHealthyPercent: 100
        MaximumPercent: 200
      DesiredCount: 1
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          # change to DISABLED if you're using private subnets that have access to a NAT gateway
          AssignPublicIp: DISABLED
          Subnets:
            - !Ref SubnetA
            - !Ref SubnetB
          SecurityGroups:
            - !Ref SchedulerSG

  Worker:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref Airflow
      TaskDefinition: !Ref WorkerTD
      DeploymentConfiguration:
        MinimumHealthyPercent: 100
        MaximumPercent: 200
      DesiredCount: 1
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          # change to DISABLED if you're using private subnets that have access to a NAT gateway
          AssignPublicIp: DISABLED
          Subnets:
            - !Ref SubnetA
            - !Ref SubnetB
          SecurityGroups:
            - !Ref WorkerSG

  WebServerTG:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 30
      # will look for a 200 status code by default unless specified otherwise
      Matcher:
        HttpCode: 200-499
      HealthCheckPath: !Ref HealthCheckPath
      HealthCheckTimeoutSeconds: 10
      UnhealthyThresholdCount: 5
      HealthyThresholdCount: 5
      Port: 8080
      Protocol: HTTP
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: 60 # default is 300
      TargetType: ip
      VpcId: !Ref VPC

  WebServerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - TargetGroupArn: !Ref WebServerTG
          Type: forward
      LoadBalancerArn: !Ref LoadBalancer
      Port: 8080
      Protocol: HTTP

  FlowerTG:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 30
      # will look for a 200 status code by default unless specified otherwise
      HealthCheckPath: !Ref HealthCheckPath
      HealthCheckTimeoutSeconds: 10
      UnhealthyThresholdCount: 5
      HealthyThresholdCount: 5
      Port: 5555
      Protocol: HTTP
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: 60 # default is 300
      TargetType: ip
      VpcId: !Ref VPC

  FlowerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - TargetGroupArn: !Ref FlowerTG
          Type: forward
      LoadBalancerArn: !Ref LoadBalancer
      Port: 5555
      Protocol: HTTP

  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      LoadBalancerAttributes:
        # this is the default, but is specified here in case it needs to be changed
        - Key: idle_timeout.timeout_seconds
          Value: 60
      # "internal" is also an option
      Scheme: internet-facing
      SecurityGroups:
        - !Ref LoadBalancerSecurityGroup
      Subnets: !Ref ALBSubnets

  WorkerAutoScaleTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MinCapacity: !Ref WorkerMinContainers
      MaxCapacity: !Ref WorkerMaxContainers
      ResourceId: !Join ['/', [service, !Ref Airflow, !GetAtt Worker.Name]]
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs
      # "The Amazon Resource Name (ARN) of an AWS Identity and Access Management (IAM) role that allows Application Auto Scaling to modify your scalable target."
      RoleARN: !GetAtt WorkerAutoScaleRole.Arn

  WorkerAutoScalingPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: !Sub "${AWS::StackName}-WorkerAutoScalingPolicy"
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref WorkerAutoScaleTarget
      TargetTrackingScalingPolicyConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageCPUUtilization
        ScaleInCooldown: 10
        ScaleOutCooldown: 10
        # Keep things at or lower than 50% CPU utilization, for example
        TargetValue: !Ref WorkerAutoScalingTargetValue

Outputs:
  Endpoint:
    Description: Endpoint
    Value: !GetAtt LoadBalancer.DNSName